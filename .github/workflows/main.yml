name: Build Qiti

on:
  push:
    branches:
      - '**'

jobs:
  mac-15-build-xcode:
  
    runs-on: macos-15

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Configure CMake (Xcode generator)
        run: |
          cmake . -B build \
          -G Xcode \
          -DQITI_ENABLE_CLANG_THREAD_SANITIZER=ON

      - name: Build Tests
        run: |
          cmake --build build --config Release --target qiti_tests_catch2
          cmake --build build --config Release --target qiti_tests_gtest
        
      - name: Run Unit Tests
        run: |
          cd build
          ctest -C Release
          
  mac-14-build-xcode:
    # main branch only, or PRs into main

    runs-on: macos-14

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Select Xcode 15.4
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      - name: Configure CMake (Xcode generator)
        run: |
          cmake . -B build \
          -G Xcode \
          -DQITI_ENABLE_CLANG_THREAD_SANITIZER=ON

      - name: Build Tests
        run: |
          cmake --build build --config Release --target qiti_tests_catch2
          cmake --build build --config Release --target qiti_tests_gtest
        
      - name: Run Unit Tests
        run: |
          cd build
          ctest -C Release

  mac-build-clang-ninja:
    runs-on: macos-15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Install LLVM 16 & Ninja
        run: |
          brew install llvm@16 ninja
          echo "PATH=$(brew --prefix llvm@16)/bin:$PATH" >> $GITHUB_ENV

      - name: Configure CMake (Ninja, LLVM Clang)
        run: |
          cmake . -B build \
             -G Ninja \
             -DCMAKE_BUILD_TYPE=Release \
             -DCMAKE_C_COMPILER=clang \
             -DCMAKE_CXX_COMPILER=clang++ \
             -DQITI_ENABLE_CLANG_THREAD_SANITIZER=ON

      - name: Build Tests
        run: |
          cmake --build build --target qiti_tests_catch2
          cmake --build build --target qiti_tests_gtest
        
      - name: Run Unit Tests
        run: |
          cd build
          ctest -C Release
          
  ubuntu-build-clang-ninja:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Install LLVM 16 & Ninja
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-16 ninja-build
          echo "CC=clang-16" >> $GITHUB_ENV
          echo "CXX=clang++-16" >> $GITHUB_ENV

      - name: Configure CMake (Ninja, LLVM Clang)
        run: |
          cmake . -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=clang-16 \
            -DCMAKE_CXX_COMPILER=clang++-16 \
            -DQITI_ENABLE_CLANG_THREAD_SANITIZER=ON

      - name: Build Tests
        run: |
          cmake --build build --target qiti_tests_catch2
          cmake --build build --target qiti_tests_gtest

      - name: Run Unit Tests
        run: |
          cd build
          ctest -C Release --verbose

  ubuntu-build-clang-ninja-no-tsan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Install LLVM 16 & Ninja
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-16 ninja-build
          echo "CC=clang-16" >> $GITHUB_ENV
          echo "CXX=clang++-16" >> $GITHUB_ENV

      - name: Configure CMake (Ninja, LLVM Clang, No ThreadSanitizer, Enable GTest)
        run: |
          cmake . -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=clang-16 \
            -DCMAKE_CXX_COMPILER=clang++-16

      - name: Build Tests  
        run: |
          cmake --build build --target qiti_tests_catch2
          cmake --build build --target qiti_tests_gtest

      - name: Run Unit Tests
        run: |
          cd build
          ctest -C Release --verbose

  debian-build-clang-ninja:
    runs-on: ubuntu-latest
    container:
      image: debian:stable
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install LLVM 17 & Ninja
        run: |
          apt-get update
          apt-get install -y clang-17 ninja-build cmake git
          echo "CC=clang-17" >> $GITHUB_ENV
          echo "CXX=clang++-17" >> $GITHUB_ENV

      - name: Configure CMake (Ninja, LLVM Clang)
        run: |
          cmake . -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=clang-17 \
            -DCMAKE_CXX_COMPILER=clang++-17 \
            -DQITI_ENABLE_CLANG_THREAD_SANITIZER=ON

      - name: Build Tests
        run: |
          cmake --build build --target qiti_tests_catch2
          cmake --build build --target qiti_tests_gtest

      - name: Run Unit Tests
        run: |
          cd build
          ctest -C Release --verbose

  fedora-build-clang-ninja:
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Clang & Ninja
        run: |
          dnf install -y clang llvm ninja-build cmake gcc-c++ git

      - name: Configure CMake (Ninja, LLVM Clang)
        run: |
          cmake . -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DQITI_ENABLE_CLANG_THREAD_SANITIZER=ON

      - name: Build Tests
        run: |
          cmake --build build --target qiti_tests_catch2
          cmake --build build --target qiti_tests_gtest

      - name: Run Unit Tests
        run: |
          cd build
          ctest -C Release --verbose

  windows-build-clang-ninja:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: 16
          
      - name: Install Ninja
        run: |
          choco install ninja

      - name: Configure CMake (Ninja, Clang)
        run: |
          cmake . -B build `
            -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_C_COMPILER=clang `
            -DCMAKE_CXX_COMPILER=clang++

      - name: Build Tests
        run: |
          cmake --build build --target qiti_tests_catch2

      - name: Run Unit Tests with Debugger (disabled - for future debugging)
        if: false  # Disabled - enable if debugging Windows crashes is needed
        run: |
          cd build/bin
          Write-Host "About to run Catch2 tests with debugger..."
          
          # Install Windows Debugging Tools if available
          try {
            Write-Host "Setting up crash dump collection..."
            # Enable application crash dumps in registry (if we have permissions)
            New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps\qiti_tests_catch2.exe" -Force -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps\qiti_tests_catch2.exe" -Name "DumpFolder" -Value "$PWD" -ErrorAction SilentlyContinue
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps\qiti_tests_catch2.exe" -Name "DumpType" -Value 1 -ErrorAction SilentlyContinue
          }
          catch {
            Write-Host "Could not set up crash dumps: $_"
          }
          
          # Try to run with CDB debugger if available
          $cdbPath = "${env:ProgramFiles(x86)}\Windows Kits\10\Debuggers\x64\cdb.exe"
          if (Test-Path $cdbPath) {
            Write-Host "Running with CDB debugger to capture stack trace..."
            & $cdbPath -c "g; .ecxr; k; q" .\qiti_tests_catch2.exe 2>&1 | Tee-Object -FilePath "debug_output.log"
            $exitCode = $LASTEXITCODE
            Write-Host "CDB finished with exit code: $exitCode"
            
            Write-Host "=== Debugger output ==="
            Get-Content "debug_output.log" -ErrorAction SilentlyContinue
          }
          else {
            Write-Host "CDB not found, trying alternative debugging..."
            
            # Try to get more info with Dr. Watson style debugging
            $ErrorActionPreference = 'Continue'
            
            # Run the executable and capture any output before crash
            Write-Host "Running executable directly..."
            try {
              .\qiti_tests_catch2.exe --reporter=console --verbosity=high 2>&1 | Tee-Object -FilePath "test_output.log"
              $exitCode = $LASTEXITCODE
              Write-Host "Test finished with exit code: $exitCode"
            }
            catch {
              Write-Host "Exception during execution: $_"
            }
            
            Write-Host "=== Test output ==="
            Get-Content "test_output.log" -ErrorAction SilentlyContinue
            
            # Check for any crash dumps created
            Write-Host "=== Looking for crash dumps ==="
            Get-ChildItem -Path . -Filter "*.dmp" -ErrorAction SilentlyContinue | ForEach-Object {
              Write-Host "Found crash dump: $($_.Name)"
            }
            
            # Check Windows Event Log
            Write-Host "=== Windows Event Log ==="
            Get-WinEvent -FilterHashtable @{LogName='Application'; Id=1000} -MaxEvents 5 -ErrorAction SilentlyContinue | 
              Where-Object {$_.Message -like "*qiti_tests_catch2*"} | 
              Select-Object TimeCreated, Message | Format-List
          }
        shell: powershell

      - name: Run Unit Tests
        run: |
          cd build/bin
          .\qiti_tests_catch2.exe --reporter=console --verbosity=high
        shell: powershell
          
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Install cpplint
        run: pip3 install cpplint

      - name: Run CPPLint
        run: ./runCpplint.sh

  clang-tidy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Install LLVM 16 & Ninja
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-16 clang-tidy-16 ninja-build
          echo "CC=clang-16" >> $GITHUB_ENV
          echo "CXX=clang++-16" >> $GITHUB_ENV

      - name: Configure CMake (Ninja, LLVM Clang)
        run: |
          cmake . -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=clang-16 \
            -DCMAKE_CXX_COMPILER=clang++-16 \
            -DQITI_ENABLE_CLANG_THREAD_SANITIZER=ON

      - name: Build project for clang-tidy
        run: cmake --build build

      - name: Run clang-tidy
        run: clang-tidy-16 -p build source/*.cpp source/*.hpp
